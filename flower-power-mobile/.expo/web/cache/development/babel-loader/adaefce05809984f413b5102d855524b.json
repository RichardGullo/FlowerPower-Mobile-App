{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Repositories\\\\FlowerPower-Mobile-App\\\\flower-power-mobile\\\\context\\\\GlobalContext.js\";\nimport React, { useState, createContext } from \"react\";\nimport { plantImages, myPlants, plantReminders2, users } from \"../constants/plants\";\nexport var GlobalContext = createContext();\nexport function GlobalContextProvider(props) {\n  var _useState = useState(_toConsumableArray(plantReminders2)),\n      _useState2 = _slicedToArray(_useState, 2),\n      plantEntries = _useState2[0],\n      setPlantEntries = _useState2[1];\n\n  var _useState3 = useState(_toConsumableArray(users)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userEntries = _useState4[0],\n      setUserEntries = _useState4[1];\n\n  var _useState5 = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUser = _useState6[0],\n      setCurrentUser = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      myKeys = _useState8[0],\n      setMyKeys = _useState8[1];\n\n  return React.createElement(GlobalContext.Provider, {\n    value: {\n      plantEntriesContext: [plantEntries, setPlantEntries],\n      usersContext: [userEntries, setUserEntries],\n      currentUserContext: [currentUser, setCurrentUser],\n      keyContext: [myKeys, setMyKeys]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["D:/Repositories/FlowerPower-Mobile-App/flower-power-mobile/context/GlobalContext.js"],"names":["React","useState","createContext","plantImages","myPlants","plantReminders2","users","GlobalContext","GlobalContextProvider","props","plantEntries","setPlantEntries","userEntries","setUserEntries","username","password","email","currentUser","setCurrentUser","myKeys","setMyKeys","plantEntriesContext","usersContext","currentUserContext","keyContext","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,aAAzB,QAA6C,OAA7C;AACA,SAAQC,WAAR,EAAqBC,QAArB,EAA+BC,eAA/B,EAAgDC,KAAhD;AAGA,OAAO,IAAMC,aAAa,GAAGL,aAAa,EAAnC;AAGP,OAAO,SAASM,qBAAT,CAA+BC,KAA/B,EAAsC;AAAA,kBACDR,QAAQ,oBAAKI,eAAL,EADP;AAAA;AAAA,MAClCK,YADkC;AAAA,MACpBC,eADoB;;AAAA,mBAEHV,QAAQ,oBAAKK,KAAL,EAFL;AAAA;AAAA,MAElCM,WAFkC;AAAA,MAErBC,cAFqB;;AAAA,mBAGHZ,QAAQ,CAAC;AAACa,IAAAA,QAAQ,EAAC,EAAV;AAAcC,IAAAA,QAAQ,EAAC,EAAvB;AAA2BC,IAAAA,KAAK,EAAC;AAAjC,GAAD,CAHL;AAAA;AAAA,MAGlCC,WAHkC;AAAA,MAGrBC,cAHqB;;AAAA,mBAIbjB,QAAQ,CAAC,CAAD,CAJK;AAAA;AAAA,MAIlCkB,MAJkC;AAAA,MAI1BC,SAJ0B;;AAOzC,SACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAI;AACGC,MAAAA,mBAAmB,EAAC,CAACX,YAAD,EAAcC,eAAd,CADvB;AAEGW,MAAAA,YAAY,EAAC,CAACV,WAAD,EAAaC,cAAb,CAFhB;AAGGU,MAAAA,kBAAkB,EAAC,CAACN,WAAD,EAAcC,cAAd,CAHtB;AAIGM,MAAAA,UAAU,EAAC,CAACL,MAAD,EAAQC,SAAR;AAJd,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKX,KAAK,CAACgB,QANX,CADJ;AAUH","sourcesContent":["import React, {useState, createContext} from \"react\"\r\nimport {plantImages, myPlants, plantReminders2, users} from '../constants/plants'\r\n\r\n// Create Context Object\r\nexport const GlobalContext = createContext();\r\n\r\n// Create a provider for components to consume and subscribe to changes\r\nexport function GlobalContextProvider(props) {\r\n    const [plantEntries, setPlantEntries] = useState([...plantReminders2]);\r\n    const [userEntries, setUserEntries] = useState([...users])\r\n    const [currentUser, setCurrentUser] = useState({username:\"\", password:\"\", email:\"\"});\r\n    const [myKeys, setMyKeys] = useState(0);\r\n    \r\n    \r\n    return(\r\n        <GlobalContext.Provider value = {{\r\n                                            plantEntriesContext:[plantEntries,setPlantEntries], \r\n                                            usersContext:[userEntries,setUserEntries],\r\n                                            currentUserContext:[currentUser, setCurrentUser],\r\n                                            keyContext:[myKeys,setMyKeys]\r\n                                        }}>\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}