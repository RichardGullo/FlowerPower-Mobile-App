{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Repositories\\\\FlowerPower-Mobile-App\\\\flower-power-mobile\\\\Screens\\\\Home.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Color from \"../constants/colors\";\nimport { Line } from \"../components/Line\";\nimport { Icon } from 'react-native-elements';\nimport { PlantReminder } from \"../components/PlantReminder\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { ConfirmationBox } from \"../components/ConfirmationBox\";\nimport Constants from 'expo-constants';\n\nfunction Home(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      checkCount = _useState2[0],\n      setCheckCount = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useContext = useContext(GlobalContext),\n      plantEntriesContext = _useContext.plantEntriesContext,\n      currentUserContext = _useContext.currentUserContext,\n      usersContext = _useContext.usersContext;\n\n  var _plantEntriesContext = _slicedToArray(plantEntriesContext, 2),\n      plantEntries = _plantEntriesContext[0],\n      setPlantEntries = _plantEntriesContext[1];\n\n  var _usersContext = _slicedToArray(usersContext, 2),\n      users = _usersContext[0],\n      setUsers = _usersContext[1];\n\n  var _currentUserContext = _slicedToArray(currentUserContext, 2),\n      currentUser = _currentUserContext[0],\n      setCurrentUser = _currentUserContext[1];\n\n  function toggleCompletedTask(id, checkboxState) {\n    var tempArray = _toConsumableArray(plantEntries);\n\n    var index = findEntryIndex(id);\n\n    if (checkboxState == true) {\n      tempArray[index].completedTask[0] = true;\n      setCheckCount(checkCount + 1);\n    } else {\n      tempArray[index].completedTask[0] = false;\n      setCheckCount(checkCount - 1);\n    }\n\n    setPlantEntries(_toConsumableArray(tempArray));\n  }\n\n  function completeSelectedTask() {\n    var tempArray = _toConsumableArray(plantEntries);\n\n    for (var i = 0; i < tempArray.length; i++) {\n      if (tempArray[i].completedTask[0] == true) tempArray[i].completedTask[1] = true;\n    }\n\n    setPlantEntries(_toConsumableArray(tempArray));\n    setCheckCount(0);\n    setModalVisible(false);\n  }\n\n  function cancelHandler() {\n    console.log(\"Cancel pressed\");\n    setModalVisible(false);\n  }\n\n  function launchModalHandler() {\n    setModalVisible(true);\n  }\n\n  return React.createElement(ScrollView, {\n    nestedScrollEnabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.mainContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    barstyle: \"dark-content\",\n    hidden: false,\n    backgroundColor: Color.theme,\n    translucent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: _objectSpread({}, styles.container),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, React.createElement(ConfirmationBox, {\n    onCancel: cancelHandler,\n    onDelete: completeSelectedTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }))), React.createElement(View, {\n    style: styles.greetingContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: [styles.HeaderText],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Good afternoon, \", '\\n', currentUser.username), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Ready for another day of gardening? \", '\\n', \"Let Flower Power land you a hand!\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/plant.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }))), React.createElement(Line, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.plantInfoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Check Information about your plants below!\"), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      console.log(\"Going to New Entry Page\");\n      navigation.navigate(\"NewEntry\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, React.createElement(Image, {\n    style: {\n      borderRadius: 5,\n      marginTop: 5,\n      marginRight: 10,\n      resizeMode: 'stretch',\n      height: 100,\n      width: 100,\n      zIndex: 2\n    },\n    source: require(\"../assets/tempFlower.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  })), React.createElement(FlatList, {\n    style: {\n      flexDirection: 'row',\n      paddingVertical: 5\n    },\n    horizontal: true,\n    data: plantEntries,\n    renderItem: function renderItem(itemData) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate('ViewEntry', {\n            itemId: itemData.item.key\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 33\n        }\n      }, React.createElement(Image, {\n        style: {\n          borderRadius: 5,\n          marginRight: 10,\n          resizeMode: 'stretch',\n          height: 100,\n          width: 100\n        },\n        source: {\n          uri: itemData.item.image\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 37\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      textAlign: 'right'\n    },\n    placeholder: \"Or click here to search for a specific plant...\",\n    placeholderTextColor: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }), React.createElement(Icon, {\n    name: \"search\",\n    type: \"material\",\n    color: Color.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, React.createElement(Line, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }), plantEntries.length != 0 && React.createElement(View, {\n    style: {\n      paddingVertical: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, \"You have the following reminders for the following plants...\"))), plantEntries.length == 0 && React.createElement(View, {\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: 300\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, \"You are currently not watching any plants.\"), React.createElement(Text, {\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, \"Click New Entry in Tab Bar to add a plant to watch.\"), React.createElement(Image, {\n    source: require(\"../assets/emptyPlant.png\"),\n    style: {\n      resizeMode: 'stretch',\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  })), React.createElement(View, {\n    style: styles.plantReminderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, plantEntries.map(function (name) {\n    return name.completedTask[1] == false && React.createElement(PlantReminder, {\n      key: name.key,\n      plantImage: name.image,\n      nickname: name.nickname,\n      species: name.species,\n      numberOfDays: name.reminders.watered,\n      id: name.key,\n      onToggleCompletedTask: toggleCompletedTask,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 55\n      }\n    });\n  })), plantEntries.length != 0 && React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      paddingVertical: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, checkCount == 0 ? React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: Color.theme,\n      flexDirection: 'row',\n      borderRadius: 5,\n      alignItems: 'center',\n      width: 180,\n      paddingVertical: 5,\n      zIndex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, React.createElement(Icon, {\n    name: \"check\",\n    type: \"entypo\",\n    color: \"white\",\n    style: {\n      paddingLeft: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }), React.createElement(Text, {\n    style: {\n      paddingLeft: 5,\n      color: 'white',\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }, \"Complete Selected \")) : React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: Color.theme,\n      flexDirection: 'row',\n      borderRadius: 5,\n      alignItems: 'center',\n      width: 200,\n      paddingVertical: 5,\n      zIndex: 1\n    },\n    onPress: function onPress() {\n      return launchModalHandler();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, React.createElement(Icon, {\n    name: \"check\",\n    type: \"entypo\",\n    color: \"white\",\n    style: {\n      paddingLeft: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }), React.createElement(Text, {\n    style: {\n      paddingLeft: 5,\n      color: 'white',\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, \"Complete Selected \", checkCount > 0 && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 118\n    }\n  }, \"(\", checkCount, \")\"))))));\n\n  function findEntryIndex(id) {\n    for (var i = 0; i < plantEntries.length; i++) {\n      if (plantEntries[i].key == id) return i;\n    }\n\n    return -1;\n  }\n}\n\nvar styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    backgroundColor: Color.background,\n    paddingTop: 20,\n    paddingLeft: 10,\n    paddingBottom: 20\n  },\n  greetingContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  plantInfoContainer: {\n    paddingVertical: 5\n  },\n  plantReminderContainer: {\n    paddingVertical: 10,\n    flex: 1\n  },\n  HeaderText: {\n    fontSize: 25,\n    color: Color.header,\n    fontWeight: 'bold'\n  },\n  container: {\n    paddingTop: 30,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.5)'\n  },\n  StatusBar: {\n    height: Constants.statusBarHeight,\n    backgroundColor: Color.theme\n  }\n});\nexport { Home };","map":{"version":3,"sources":["D:/Repositories/FlowerPower-Mobile-App/flower-power-mobile/Screens/Home.js"],"names":["React","useContext","useEffect","useState","Color","Line","Icon","PlantReminder","GlobalContext","ConfirmationBox","Constants","Home","navigation","route","checkCount","setCheckCount","modalVisible","setModalVisible","plantEntriesContext","currentUserContext","usersContext","plantEntries","setPlantEntries","users","setUsers","currentUser","setCurrentUser","toggleCompletedTask","id","checkboxState","tempArray","index","findEntryIndex","completedTask","completeSelectedTask","i","length","cancelHandler","console","log","launchModalHandler","styles","mainContainer","theme","container","greetingContainer","justifyContent","HeaderText","username","require","plantInfoContainer","flexDirection","navigate","borderRadius","marginTop","marginRight","resizeMode","height","width","zIndex","paddingVertical","itemData","itemId","item","key","uri","image","textAlign","header","alignItems","fontSize","plantReminderContainer","map","name","nickname","species","reminders","watered","backgroundColor","paddingLeft","color","StyleSheet","create","flex","background","paddingTop","paddingBottom","fontWeight","StatusBar","statusBarHeight"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,SAA1B,EAAoCC,QAApC,QAAmD,OAAnD;;;;;;;;;;;;AAEA,OAAOC,KAAP;AACA,SAAQC,IAAR;AACA,SAAQC,IAAR,QAAmB,uBAAnB;AACA,SAAQC,aAAR;AACA,SAASC,aAAT;AACA,SAASC,eAAT;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,SAASC,IAAT,OACA;AAAA;;AAAA,MADeC,UACf,QADeA,UACf;AAAA,MAD2BC,KAC3B,QAD2BA,KAC3B;;AAAA,kBAEwCV,QAAQ,CAAC,CAAD,CAFhD;AAAA;AAAA,MAEWW,UAFX;AAAA,MAEuBC,aAFvB;;AAAA,mBAG4CZ,QAAQ,CAAC,KAAD,CAHpD;AAAA;AAAA,MAGWa,YAHX;AAAA,MAGyBC,eAHzB;;AAAA,oBAKkEhB,UAAU,CAACO,aAAD,CAL5E;AAAA,MAKWU,mBALX,eAKWA,mBALX;AAAA,MAK+BC,kBAL/B,eAK+BA,kBAL/B;AAAA,MAKkDC,YALlD,eAKkDA,YALlD;;AAAA,4CAO2CF,mBAP3C;AAAA,MAOUG,YAPV;AAAA,MAOwBC,eAPxB;;AAAA,qCAQ8BF,YAR9B;AAAA,MAQWG,KARX;AAAA,MAQkBC,QARlB;;AAAA,2CAS0CL,kBAT1C;AAAA,MASWM,WATX;AAAA,MASwBC,cATxB;;AAcI,WAASC,mBAAT,CAA6BC,EAA7B,EAAiCC,aAAjC,EACA;AACI,QAAIC,SAAS,sBAAOT,YAAP,CAAb;;AAEA,QAAIU,KAAK,GAAGC,cAAc,CAACJ,EAAD,CAA1B;;AAEA,QAAGC,aAAa,IAAI,IAApB,EACA;AACIC,MAAAA,SAAS,CAACC,KAAD,CAAT,CAAiBE,aAAjB,CAA+B,CAA/B,IAAoC,IAApC;AACAlB,MAAAA,aAAa,CAACD,UAAU,GAAC,CAAZ,CAAb;AACH,KAJD,MAMA;AACIgB,MAAAA,SAAS,CAACC,KAAD,CAAT,CAAiBE,aAAjB,CAA+B,CAA/B,IAAoC,KAApC;AACAlB,MAAAA,aAAa,CAACD,UAAU,GAAC,CAAZ,CAAb;AACH;;AAEDQ,IAAAA,eAAe,oBAAKQ,SAAL,EAAf;AACH;;AAGD,WAASI,oBAAT,GACA;AACI,QAAIJ,SAAS,sBAAOT,YAAP,CAAb;;AAEA,SAAI,IAAIc,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,SAAS,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EACA;AACI,UAAGL,SAAS,CAACK,CAAD,CAAT,CAAaF,aAAb,CAA2B,CAA3B,KAAiC,IAApC,EACIH,SAAS,CAACK,CAAD,CAAT,CAAaF,aAAb,CAA2B,CAA3B,IAAgC,IAAhC;AACP;;AAEDX,IAAAA,eAAe,oBAAKQ,SAAL,EAAf;AACAf,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAE,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH;;AAGD,WAASoB,aAAT,GACA;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAtB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH;;AAGD,WAASuB,kBAAT,GACA;AACIvB,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEH;;AAGD,SAEA,oBAAC,UAAD;AAAY,IAAA,mBAAmB,EAAI,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAIwB,MAAM,CAACC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAG,cAAtB;AAAqC,IAAA,MAAM,EAAI,KAA/C;AAAsD,IAAA,eAAe,EAAItC,KAAK,CAACuC,KAA/E;AAAsF,IAAA,WAAW,EAAI,IAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,EAII,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAI3B,YAAlB;AAAgC,IAAA,aAAa,EAAG,OAAhD;AAAwD,IAAA,WAAW,EAAI,IAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,oBAAC,IAAD;AAAM,IAAA,KAAK,oBAAQyB,MAAM,CAACG,SAAf,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,QAAQ,EAAIP,aAA7B;AAA4C,IAAA,QAAQ,EAAIH,oBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADR,CAJJ,EAWI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAIO,MAAM,CAACI,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACC,MAAAA,cAAc,EAAC;AAAhB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI,CAACL,MAAM,CAACM,UAAR,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqD,IAArD,EAA2DtB,WAAW,CAACuB,QAAvE,CADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAA2C,IAA3C,sCAFJ,CADJ,EAKI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAIC,OAAO,uBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CAXJ,EAqBI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBJ,EAwBI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAIR,MAAM,CAACS,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAHJ,EAKI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACC,MAAAA,aAAa,EAAC;AAAf,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAI,mBAAM;AAACb,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAAuC3B,MAAAA,UAAU,CAACwC,QAAX,CAAoB,UAApB;AAAiC,KAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAI;AAACC,MAAAA,YAAY,EAAC,CAAd;AAAiBC,MAAAA,SAAS,EAAC,CAA3B;AAA8BC,MAAAA,WAAW,EAAC,EAA1C;AAA8CC,MAAAA,UAAU,EAAC,SAAzD;AAAoEC,MAAAA,MAAM,EAAC,GAA3E;AAAgFC,MAAAA,KAAK,EAAC,GAAtF;AAA2FC,MAAAA,MAAM,EAAC;AAAlG,KADb;AAEI,IAAA,MAAM,EAAIV,OAAO,4BAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EASI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAI;AAACE,MAAAA,aAAa,EAAC,KAAf;AAAqBS,MAAAA,eAAe,EAAC;AAArC,KAAnB;AAA4D,IAAA,UAAU,EAAI,IAA1E;AAAgF,IAAA,IAAI,EAAIvC,YAAxF;AACQ,IAAA,UAAU,EAAI,oBAAAwC,QAAQ;AAAA,aAClB,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,mBAAM;AACGjD,UAAAA,UAAU,CAACwC,QAAX,CAAoB,WAApB,EAAiC;AACjCU,YAAAA,MAAM,EAAED,QAAQ,CAACE,IAAT,CAAcC;AADW,WAAjC;AAEA,SAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAI;AAACX,UAAAA,YAAY,EAAC,CAAd;AAAiBE,UAAAA,WAAW,EAAC,EAA7B;AAAiCC,UAAAA,UAAU,EAAC,SAA5C;AAAuDC,UAAAA,MAAM,EAAC,GAA9D;AAAmEC,UAAAA,KAAK,EAAC;AAAzE,SAAhB;AAA+F,QAAA,MAAM,EAAI;AAACO,UAAAA,GAAG,EAACJ,QAAQ,CAACE,IAAT,CAAcG;AAAnB,SAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADkB;AAAA,KAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CALJ,EA2BI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACf,MAAAA,aAAa,EAAC,KAAf;AAAsBL,MAAAA,cAAc,EAAC;AAArC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAI;AAACqB,MAAAA,SAAS,EAAC;AAAX,KAApB;AAAyC,IAAA,WAAW,EAAG,iDAAvD;AAAyG,IAAA,oBAAoB,EAAG,OAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAG,QAAb;AAAsB,IAAA,IAAI,EAAG,UAA7B;AAAwC,IAAA,KAAK,EAAI/D,KAAK,CAACgE,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CA3BJ,CAxBJ,EA0DI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEK/C,YAAY,CAACe,MAAb,IAAuB,CAAvB,IACD,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACwB,MAAAA,eAAe,EAAC;AAAjB,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADJ,CAHJ,CA1DJ,EAmEKvC,YAAY,CAACe,MAAb,IAAuB,CAAvB,IAEG,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACU,MAAAA,cAAc,EAAC,QAAhB;AAA0BuB,MAAAA,UAAU,EAAC,QAArC;AAA+CZ,MAAAA,MAAM,EAAC;AAAtD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACa,MAAAA,QAAQ,EAAC;AAAV,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACA,MAAAA,QAAQ,EAAC;AAAV,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAFJ,EAGI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAIrB,OAAO,4BAAxB;AAAsD,IAAA,KAAK,EAAI;AAACO,MAAAA,UAAU,EAAC,SAAZ;AAAuBE,MAAAA,KAAK,EAAC,GAA7B;AAAkCD,MAAAA,MAAM,EAAC;AAAzC,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CArER,EA6EI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAIhB,MAAM,CAAC8B,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKlD,YAAY,CAACmD,GAAb,CAAiB,UAACC,IAAD;AAAA,WACdA,IAAI,CAACxC,aAAL,CAAmB,CAAnB,KAAyB,KAAzB,IAAkC,oBAAC,aAAD;AAC9B,MAAA,GAAG,EAAIwC,IAAI,CAACT,GADkB;AAE9B,MAAA,UAAU,EAAIS,IAAI,CAACP,KAFW;AAG9B,MAAA,QAAQ,EAAIO,IAAI,CAACC,QAHa;AAI9B,MAAA,OAAO,EAAID,IAAI,CAACE,OAJc;AAK9B,MAAA,YAAY,EAAIF,IAAI,CAACG,SAAL,CAAeC,OALD;AAM9B,MAAA,EAAE,EAAIJ,IAAI,CAACT,GANmB;AAO9B,MAAA,qBAAqB,EAAIrC,mBAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpB;AAAA,GAAjB,CAFL,CA7EJ,EA8FKN,YAAY,CAACe,MAAb,IAAuB,CAAvB,IACD,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACiC,MAAAA,UAAU,EAAC,QAAZ;AAAqBT,MAAAA,eAAe,EAAC;AAArC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGK9C,UAAU,IAAI,CAAd,GACD,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAI;AAACgE,MAAAA,eAAe,EAAC1E,KAAK,CAACuC,KAAvB;AAA8BQ,MAAAA,aAAa,EAAC,KAA5C;AAAmDE,MAAAA,YAAY,EAAC,CAAhE;AAAmEgB,MAAAA,UAAU,EAAC,QAA9E;AAAwFX,MAAAA,KAAK,EAAC,GAA9F;AAAmGE,MAAAA,eAAe,EAAC,CAAnH;AAAsHD,MAAAA,MAAM,EAAC;AAA7H,KADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGQ,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,OAAZ;AAAoB,IAAA,IAAI,EAAG,QAA3B;AAAoC,IAAA,KAAK,EAAG,OAA5C;AAAoD,IAAA,KAAK,EAAI;AAACoB,MAAAA,WAAW,EAAC;AAAb,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,EAIQ,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACA,MAAAA,WAAW,EAAC,CAAb;AAAgBC,MAAAA,KAAK,EAAC,OAAtB;AAA+BV,MAAAA,QAAQ,EAAC;AAAxC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJR,CADC,GAQD,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAI;AAACQ,MAAAA,eAAe,EAAC1E,KAAK,CAACuC,KAAvB;AAA8BQ,MAAAA,aAAa,EAAC,KAA5C;AAAmDE,MAAAA,YAAY,EAAC,CAAhE;AAAmEgB,MAAAA,UAAU,EAAC,QAA9E;AAAwFX,MAAAA,KAAK,EAAC,GAA9F;AAAmGE,MAAAA,eAAe,EAAC,CAAnH;AAAsHD,MAAAA,MAAM,EAAC;AAA7H,KADb;AAEI,IAAA,OAAO,EAAI;AAAA,aAAMnB,kBAAkB,EAAxB;AAAA,KAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,OAAZ;AAAoB,IAAA,IAAI,EAAG,QAA3B;AAAoC,IAAA,KAAK,EAAG,OAA5C;AAAoD,IAAA,KAAK,EAAI;AAACuC,MAAAA,WAAW,EAAC;AAAb,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAI;AAACA,MAAAA,WAAW,EAAC,CAAb;AAAgBC,MAAAA,KAAK,EAAC,OAAtB;AAA+BV,MAAAA,QAAQ,EAAC;AAAxC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA+ExD,UAAU,GAAG,CAAb,IAAkB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQA,UAAR,MAAjG,CALJ,CAXJ,CA/FJ,CAFJ,CAFA;;AAmIA,WAASkB,cAAT,CAAwBJ,EAAxB,EACA;AACI,SAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,YAAY,CAACe,MAAhC,EAAwCD,CAAC,EAAzC,EACA;AACI,UAAGd,YAAY,CAACc,CAAD,CAAZ,CAAgB6B,GAAhB,IAAuBpC,EAA1B,EACI,OAAOO,CAAP;AACP;;AAED,WAAO,CAAC,CAAR;AACH;AACJ;;AAED,IAAMM,MAAM,GAAGwC,UAAU,CAACC,MAAX,CAAkB;AAC7BxC,EAAAA,aAAa,EAAC;AACVyC,IAAAA,IAAI,EAAC,CADK;AAEVL,IAAAA,eAAe,EAAC1E,KAAK,CAACgF,UAFZ;AAGVC,IAAAA,UAAU,EAAC,EAHD;AAIVN,IAAAA,WAAW,EAAC,EAJF;AAKVO,IAAAA,aAAa,EAAC;AALJ,GADe;AAS7BzC,EAAAA,iBAAiB,EAAC;AACdM,IAAAA,aAAa,EAAC,KADA;AAEdL,IAAAA,cAAc,EAAC;AAFD,GATW;AAc7BI,EAAAA,kBAAkB,EAAC;AACfU,IAAAA,eAAe,EAAC;AADD,GAdU;AAkB7BW,EAAAA,sBAAsB,EAAC;AACnBX,IAAAA,eAAe,EAAC,EADG;AAEnBuB,IAAAA,IAAI,EAAC;AAFc,GAlBM;AAuB7BpC,EAAAA,UAAU,EACV;AACIuB,IAAAA,QAAQ,EAAC,EADb;AAEIU,IAAAA,KAAK,EAAE5E,KAAK,CAACgE,MAFjB;AAGImB,IAAAA,UAAU,EAAC;AAHf,GAxB6B;AA6B7B3C,EAAAA,SAAS,EAAE;AACPyC,IAAAA,UAAU,EAAC,EADJ;AAGPF,IAAAA,IAAI,EAAC,CAHE;AAIPrC,IAAAA,cAAc,EAAC,QAJR;AAKPuB,IAAAA,UAAU,EAAC,QALJ;AAMPS,IAAAA,eAAe,EAAC;AANT,GA7BkB;AAqC3BU,EAAAA,SAAS,EAAE;AACT/B,IAAAA,MAAM,EAAE/C,SAAS,CAAC+E,eADT;AAETX,IAAAA,eAAe,EAAE1E,KAAK,CAACuC;AAFd;AArCgB,CAAlB,CAAf;AA2CA,SAAQhC,IAAR","sourcesContent":["import React,{useContext, useEffect,useState} from 'react'\r\nimport {Text, View, Button, StyleSheet,StatusBar, Image, ScrollView, FlatList, TextInput, TouchableOpacity, Modal} from 'react-native'\r\nimport Color from '../constants/colors';\r\nimport {Line} from '../components/Line'\r\nimport {Icon} from 'react-native-elements'\r\nimport {PlantReminder} from '../components/PlantReminder'\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport { ConfirmationBox } from '../components/ConfirmationBox';\r\nimport Constants from 'expo-constants';\r\n\r\nfunction Home({navigation, route})\r\n{\r\n    // States and Intial values\r\n    const [checkCount, setCheckCount] = useState(0);\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    \r\n    const {plantEntriesContext,currentUserContext,usersContext} = useContext(GlobalContext) \r\n\r\n    const[plantEntries, setPlantEntries] = plantEntriesContext;\r\n    const [users, setUsers] = usersContext;\r\n    const [currentUser, setCurrentUser] = currentUserContext;\r\n\r\n    // Function that updates global when check box is selected.\r\n    // The  idea is that you modify the local global from the server \r\n    // But once we press complete selected, make the server call.\r\n    function toggleCompletedTask(id, checkboxState)\r\n    {\r\n        let tempArray = [...plantEntries];\r\n\r\n        let index = findEntryIndex(id);\r\n\r\n        if(checkboxState == true)\r\n        {\r\n            tempArray[index].completedTask[0] = true;\r\n            setCheckCount(checkCount+1);\r\n        }\r\n        else\r\n        {\r\n            tempArray[index].completedTask[0] = false;\r\n            setCheckCount(checkCount-1);\r\n        }\r\n\r\n        setPlantEntries([...tempArray]);\r\n    }\r\n\r\n    // Function that will make the server call (Modal Confirmation Button)\r\n    function completeSelectedTask()\r\n    {\r\n        let tempArray = [...plantEntries];\r\n\r\n        for(let i = 0; i < tempArray.length; i++)\r\n        {\r\n            if(tempArray[i].completedTask[0] == true)\r\n                tempArray[i].completedTask[1] = true;\r\n        }\r\n\r\n        setPlantEntries([...tempArray]);\r\n        setCheckCount(0);\r\n        setModalVisible(false);\r\n    }\r\n\r\n    // Cancel Button for confirmation dialogue\r\n    function cancelHandler()\r\n    {\r\n        console.log(\"Cancel pressed\");\r\n        setModalVisible(false);\r\n    }\r\n\r\n    // Launches our Modal when Complete Selected is Pressed.\r\n    function launchModalHandler()\r\n    {\r\n        setModalVisible(true);\r\n    \r\n    }\r\n\r\n    \r\n    return (\r\n    // Main Container - Purple\r\n    <ScrollView nestedScrollEnabled = {true}>\r\n        \r\n        <View style = {styles.mainContainer}>\r\n    \r\n                <StatusBar barstyle = \"dark-content\" hidden = {false} backgroundColor = {Color.theme} translucent = {true}/>\r\n            \r\n            <Modal visible = {modalVisible} animationType = \"slide\" transparent = {true}>\r\n                    <View style = {{...styles.container}}>\r\n                        <ConfirmationBox onCancel = {cancelHandler} onDelete = {completeSelectedTask}/>\r\n                    </View>\r\n                </Modal>\r\n\r\n            {/*Greeting Container */}    \r\n            <View style = {styles.greetingContainer}>\r\n                <View style = {{justifyContent:'center'}}>\r\n                    <Text style = {[styles.HeaderText]}>Good afternoon, {'\\n'}{currentUser.username}</Text>\r\n                    <Text>Ready for another day of gardening? {'\\n'}Let Flower Power land you a hand!</Text>\r\n                </View>\r\n                <View>\r\n                    <Image source = {require('../assets/plant.png')} />\r\n                </View>\r\n            </View>\r\n\r\n            <Line/>\r\n\r\n            {/* Plant Info Container- Horizontal Scroll */}\r\n            <View style = {styles.plantInfoContainer}>\r\n                \r\n                \r\n                <Text>Check Information about your plants below!</Text>\r\n\r\n                <View style = {{flexDirection:'row'}}>\r\n                    <TouchableOpacity onPress = {() => {console.log(\"Going to New Entry Page\");navigation.navigate(\"NewEntry\");}}>\r\n                        <Image \r\n                            style = {{borderRadius:5, marginTop:5, marginRight:10, resizeMode:'stretch', height:100, width:100, zIndex:2}} \r\n                            source = {require('../assets/tempFlower.png')}\r\n                        />\r\n                    </TouchableOpacity>\r\n                    \r\n                \r\n                    <FlatList style = {{flexDirection:'row',paddingVertical:5}} horizontal = {true} data = {plantEntries} \r\n                            renderItem = {itemData =>  \r\n                                <TouchableOpacity onPress={() => {\r\n                                                                    navigation.navigate('ViewEntry', {\r\n                                                                    itemId: itemData.item.key,\r\n                                                                });}}>\r\n                                    <Image style = {{borderRadius:5, marginRight:10, resizeMode:'stretch', height:100, width:100}} source = {{uri:itemData.item.image}} />\r\n                                </TouchableOpacity>}\r\n                    />\r\n                </View>\r\n                \r\n                {/* Search */}\r\n               \r\n                <View style = {{flexDirection:'row', justifyContent:'flex-end'}}>\r\n                    <TextInput style = {{textAlign:'right'}} placeholder = \"Or click here to search for a specific plant...\" placeholderTextColor = \"black\"/> \r\n                    <Icon name = 'search' type = \"material\" color = {Color.header}/>\r\n                </View>\r\n                \r\n            </View>\r\n           \r\n            <View>\r\n                <Line />\r\n                {plantEntries.length != 0 &&\r\n                <View style = {{paddingVertical:10}}>\r\n                    <Text>You have the following reminders for the following plants...</Text>\r\n                </View>\r\n                }\r\n            </View>\r\n            \r\n            {plantEntries.length == 0 &&\r\n            \r\n                <View style = {{justifyContent:'center', alignItems:'center', height:300}}>\r\n                    <Text style = {{fontSize:16}}>You are currently not watching any plants.</Text>\r\n                    <Text style = {{fontSize:16}}>Click New Entry in Tab Bar to add a plant to watch.</Text>\r\n                    <Image source = {require(\"../assets/emptyPlant.png\")} style = {{resizeMode:'stretch', width:200, height:200}} />\r\n                </View>\r\n            \r\n            }\r\n            {/* Plant Reminder Container - Vertical Scroll */}\r\n            <View style = {styles.plantReminderContainer}>\r\n         \r\n                {plantEntries.map((name) =>\r\n                    name.completedTask[1] == false && <PlantReminder\r\n                        key = {name.key}\r\n                        plantImage = {name.image}\r\n                        nickname = {name.nickname}\r\n                        species = {name.species}\r\n                        numberOfDays = {name.reminders.watered}\r\n                        id = {name.key}\r\n                        onToggleCompletedTask = {toggleCompletedTask}\r\n                    />\r\n                )}\r\n\r\n\r\n            </View>\r\n            \r\n            {plantEntries.length != 0 &&\r\n            <View style = {{alignItems:'center',paddingVertical:10}}>\r\n\r\n                {/* Complete Selected Button */}\r\n                {checkCount == 0 ? \r\n                <TouchableOpacity \r\n                    style = {{backgroundColor:Color.theme, flexDirection:'row', borderRadius:5, alignItems:'center', width:180, paddingVertical:5, zIndex:1}}\r\n                >\r\n                        <Icon name ='check' type = 'entypo' color = \"white\" style = {{paddingLeft:5}}/>\r\n                        <Text style = {{paddingLeft:5, color:'white', fontSize:16}}>Complete Selected </Text>\r\n                </TouchableOpacity>\r\n                :\r\n                <TouchableOpacity \r\n                    style = {{backgroundColor:Color.theme, flexDirection:'row', borderRadius:5, alignItems:'center', width:200, paddingVertical:5, zIndex:1}}\r\n                    onPress = {() => launchModalHandler()}\r\n                >\r\n                    <Icon name ='check' type = 'entypo' color = \"white\" style = {{paddingLeft:5}}/>\r\n                    <Text style = {{paddingLeft:5, color:'white', fontSize:16}}>Complete Selected {checkCount > 0 && <Text>({checkCount})</Text>}</Text>\r\n                </TouchableOpacity>\r\n                }\r\n            </View>\r\n            }   \r\n            \r\n            {/* <Button title = \"TestButton\" onPress = {() => setUsername(\"Dusty\")} /> */}\r\n            {/* <Button title = \"Output\" onPress = {() => console.log(plantEntries)} /> */}\r\n            \r\n\r\n        </View>\r\n    </ScrollView>\r\n    )\r\n    \r\n    // Function that will grab will return the index of \r\n    // the element in our global array.\r\n    function findEntryIndex(id)\r\n    {\r\n        for(let i = 0; i < plantEntries.length; i++)\r\n        {\r\n            if(plantEntries[i].key == id)\r\n                return i;\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mainContainer:{\r\n        flex:1,\r\n        backgroundColor:Color.background,\r\n        paddingTop:20,\r\n        paddingLeft:10,\r\n        paddingBottom:20\r\n        // borderWidth:5, borderColor:'purple'\r\n    },\r\n    greetingContainer:{\r\n        flexDirection:'row', \r\n        justifyContent:'space-between',\r\n        // borderWidth:5, borderColor:'teal'\r\n    },\r\n    plantInfoContainer:{\r\n        paddingVertical:5,\r\n        // borderWidth:5, borderColor:'red'\r\n    },\r\n    plantReminderContainer:{\r\n        paddingVertical:10,\r\n        flex:1,\r\n       // borderWidth:5, borderColor:'red'\r\n    },\r\n    HeaderText:\r\n    {\r\n        fontSize:25,\r\n        color: Color.header,\r\n        fontWeight:'bold'\r\n    },\r\n    container: {\r\n        paddingTop:30, \r\n        // borderWidth:5, borderColor:'purple',\r\n        flex:1, \r\n        justifyContent:'center', \r\n        alignItems:'center',\r\n        backgroundColor:'rgba(0,0,0,0.5)'\r\n      },\r\n      StatusBar: {\r\n        height: Constants.statusBarHeight,\r\n        backgroundColor: Color.theme\r\n    }\r\n})\r\n\r\nexport {Home}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}