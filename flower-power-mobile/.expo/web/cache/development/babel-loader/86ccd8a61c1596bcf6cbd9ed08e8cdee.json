{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Repositories\\\\FlowerPower-Mobile-App\\\\flower-power-mobile\\\\Screens\\\\Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Color from \"../constants/colors\";\nimport { Line } from \"../components/Line\";\nimport { DottedLine } from \"../components/DottedLine\";\nimport Dash from 'react-native-dash';\nimport { Input } from 'react-native-elements';\nimport { BrownButton } from \"../components/BrownButton\";\nimport { Icon } from 'react-native-elements';\nimport { myPlants, plantReminders } from \"../constants/plants\";\nimport { PlantEntry } from \"../components/PlantEntry\";\nimport { DialogueBox } from \"../components/DialogueBox\";\nimport { CheckBox } from 'react-native-elements';\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nfunction Search(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(GlobalContext),\n      plantEntriesContext = _useContext.plantEntriesContext;\n\n  var _useState = useState(\"Richard\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkCount = _useState4[0],\n      setCheckCount = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _plantEntriesContext = _slicedToArray(plantEntriesContext, 2),\n      plantEntries = _plantEntriesContext[0],\n      setPlantEntries = _plantEntriesContext[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentEntry = _useState8[0],\n      setCurrentEntry = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      filteredArray = _useState10[0],\n      setFilteredArray = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      searchInput = _useState12[0],\n      setSearchInput = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      deletePressed = _useState14[0],\n      setDeletePressed = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      toggleCheckBox = _useState16[0],\n      setToggleCheckBox = _useState16[1];\n\n  var _useState17 = useState([{\n    id: 1,\n    backgroundColor: Color.header,\n    color: 'white'\n  }, {\n    id: 2,\n    backgroundColor: Color.background,\n    color: Color.header\n  }, {\n    id: 3,\n    backgroundColor: Color.background,\n    color: Color.header\n  }, {\n    id: 4,\n    backgroundColor: Color.background,\n    color: Color.header\n  }]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      sortButtons = _useState18[0],\n      setSortButtons = _useState18[1];\n\n  React.useEffect(function () {\n    if (searchInput.length != 0 && deletePressed == true) filterTable(searchInput);\n  }, [plantEntries]);\n\n  function filterTable(text) {\n    var tempArray = [];\n\n    for (var i = 0; i < plantEntries.length; i++) {\n      if (plantEntries[i].nickname.toLowerCase().includes(text.toLowerCase())) tempArray.push(plantEntries[i]);\n    }\n\n    setFilteredArray([].concat(tempArray));\n  }\n\n  function cancelHandler() {\n    console.log(\"Cancel pressed\");\n    setModalVisible(false);\n  }\n\n  function deleteHandler() {\n    setDeletePressed(true);\n    setPlantEntries(function (currentPlants) {\n      return currentPlants.filter(function (name) {\n        return name.deleteEntry == false;\n      });\n    });\n    console.log(\"Delete Pressed\");\n    setCheckCount(0);\n    setModalVisible(false);\n  }\n\n  function toggleDeleteHandler(id, checkboxState) {\n    var tempArray = _toConsumableArray(plantEntries);\n\n    var index = findEntryIndex(id);\n\n    if (checkboxState == true) {\n      tempArray[index].deleteEntry = true;\n      setCheckCount(checkCount + 1);\n    } else {\n      tempArray[index].deleteEntry = false;\n      setCheckCount(checkCount - 1);\n    }\n\n    setPlantEntries(_toConsumableArray(tempArray));\n  }\n\n  function launchModalHandler() {\n    setModalVisible(true);\n  }\n\n  function toggleSort(id) {\n    var tempObject = _toConsumableArray(sortButtons);\n\n    if (id == 1) {\n      sortByNickName();\n    } else if (id == 2) {\n      sortBySpecies();\n    } else if (id == 3) {\n      sortByClassification();\n    } else {\n      sortByDate();\n    }\n\n    for (var i = 0; i < tempObject.length; i++) {\n      if (tempObject[i].id == id) {\n        tempObject[i].backgroundColor = Color.header;\n        tempObject[i].color = 'white';\n      } else {\n        tempObject[i].backgroundColor = Color.background;\n        tempObject[i].color = Color.header;\n      }\n    }\n\n    setSortButtons(tempObject);\n  }\n\n  function sortByNickName() {\n    var tempEntries;\n    if (searchInput.length == 0) tempEntries = _toConsumableArray(plantEntries);else tempEntries = _toConsumableArray(filteredArray);\n    tempEntries = tempEntries.sort(function (a, b) {\n      if (a.nickname.toLowerCase() > b.nickname.toLowerCase()) return 1;else if (a.nickname.toLowerCase() < b.nickname.toLowerCase()) return -1;else return 0;\n    });\n    if (searchInput.length == 0) setPlantEntries(_toConsumableArray(tempEntries));else setFilteredArray(_toConsumableArray(tempEntries));\n  }\n\n  function sortBySpecies() {\n    var tempEntries = _toConsumableArray(plantEntries);\n\n    tempEntries = tempEntries.sort(function (a, b) {\n      if (a.species.toLowerCase() > b.species.toLowerCase()) return 1;else if (a.species.toLowerCase() < b.species.toLowerCase()) return -1;else return 0;\n    });\n    setPlantEntries(_toConsumableArray(tempEntries));\n  }\n\n  function sortByClassification() {\n    var tempEntries = _toConsumableArray(plantEntries);\n\n    tempEntries = tempEntries.sort(function (a, b) {\n      if (a.classification[0].toLowerCase() > b.classification[0].toLowerCase()) return 1;else if (a.classification[0].toLowerCase() < b.classification[0].toLowerCase()) return -1;else return 0;\n    });\n    setPlantEntries(_toConsumableArray(tempEntries));\n  }\n\n  function sortByDate() {\n    var tempEntries;\n    if (searchInput.length == 0) tempEntries = _toConsumableArray(plantEntries);else tempEntries = _toConsumableArray(filteredArray);\n    tempEntries = tempEntries.sort(function (a, b) {\n      return new Date(convertDate(a.date)) - new Date(convertDate(b.date));\n    });\n    if (searchInput.length == 0) setPlantEntries(_toConsumableArray(tempEntries));else setFilteredArray(_toConsumableArray(tempEntries));\n  }\n\n  return React.createElement(ScrollView, {\n    nestedScrollEnabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.mainContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, React.createElement(StatusBar, {\n    barstyle: \"dark-content\",\n    hidden: false,\n    backgroundColor: Color.theme,\n    translucent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    transparent: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: _objectSpread({}, styles.container),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }, React.createElement(DialogueBox, {\n    onCancel: cancelHandler,\n    onDelete: deleteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 25\n    }\n  }))), React.createElement(View, {\n    style: styles.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: Color.header,\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 25\n    }\n  }, \"Enter a phrase below to search through your saved plants. Plants with a nickname or species matching the search name will be shown\")), React.createElement(View, {\n    style: {\n      paddingTop: 10,\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 21\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Search Criteria\",\n    style: {\n      borderColor: '#a5dfb2',\n      borderWidth: 2,\n      borderRadius: 5,\n      backgroundColor: 'white',\n      paddingLeft: 10,\n      width: '100%'\n    },\n    placeholderTextColor: \"black\",\n    onChangeText: function onChangeText(text) {\n      filterTable(text);\n      setSearchInput(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  })), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      paddingBottom: 10,\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 21\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 25\n    }\n  }, React.createElement(CheckBox, {\n    checked: toggleCheckBox,\n    onPress: function onPress() {\n      return setToggleCheckBox(!toggleCheckBox);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 29\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, \"Display partial matches\")), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 25\n    }\n  }, React.createElement(Icon, {\n    name: \"search\",\n    type: \"material\",\n    color: Color.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  }), React.createElement(Text, {\n    style: {\n      color: Color.header\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }, \"Search\")))), React.createElement(Line, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles.sortingContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 25\n    }\n  }, \"Sort results by: \"), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'flex-start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 25\n    }\n  }, React.createElement(BrownButton, {\n    data: sortButtons[0],\n    onSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 25\n    }\n  }, \"Nickname\"), React.createElement(BrownButton, {\n    data: sortButtons[1],\n    onSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 25\n    }\n  }, \"Species\"), React.createElement(BrownButton, {\n    data: sortButtons[2],\n    onSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 25\n    }\n  }, \"Classification\"), React.createElement(BrownButton, {\n    data: sortButtons[3],\n    onSort: toggleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 25\n    }\n  }, \"Date\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 25\n    }\n  }, React.createElement(TouchableOpacity, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 29\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: Color.header,\n      paddingHorizontal: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 33\n    }\n  }, React.createElement(Icon, {\n    name: \"md-arrow-down\",\n    type: \"ionicon\",\n    color: \"white\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 37\n    }\n  }))))), React.createElement(View, {\n    style: {\n      paddingTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 25\n    }\n  }, \"Currently displaying search results for: \\\"\", searchInput, \"\\\"\")), React.createElement(View, {\n    style: {\n      paddingTop: 20,\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 21\n    }\n  }, searchInput.length == 0 && plantEntries.map(function (name) {\n    return React.createElement(PlantEntry, {\n      key: name.key,\n      id: name.key,\n      classification: _toConsumableArray(name.classification),\n      nickname: name.nickname,\n      species: name.species,\n      date: formatDate(name.date),\n      image: name.image,\n      onModal: launchModalHandler,\n      onToggleDelete: toggleDeleteHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 25\n      }\n    });\n  }), searchInput.length != 0 && filteredArray.map(function (name) {\n    return React.createElement(PlantEntry, {\n      key: name.key,\n      id: name.key,\n      classification: _toConsumableArray(name.classification),\n      nickname: name.nickname,\n      species: name.species,\n      date: formatDate(name.date),\n      image: name.image,\n      onModal: launchModalHandler,\n      onToggleDelete: toggleDeleteHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 25\n      }\n    });\n  }))), plantEntries.length == 0 && React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }\n  }, \"You are currently not watching any plants.\"), React.createElement(Text, {\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, \"Add a plant in New Entry Tab to have seach history.\"), React.createElement(Image, {\n    source: require(\"../assets/plantSearch.png\"),\n    style: {\n      resizeMode: 'stretch',\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 25\n    }\n  })), plantEntries.length != 0 && React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      paddingTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }\n  }, checkCount == 0 ? React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: Color.theme,\n      flexDirection: 'row',\n      borderRadius: 5,\n      alignItems: 'center',\n      width: 170,\n      paddingVertical: 5\n    },\n    onPress: function onPress() {\n      return launchModalHandler();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 21\n    }\n  }, React.createElement(Icon, {\n    name: \"md-close\",\n    type: \"ionicon\",\n    color: \"white\",\n    style: {\n      paddingLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 25\n    }\n  }), React.createElement(Text, {\n    style: {\n      paddingLeft: 10,\n      color: 'white',\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 25\n    }\n  }, \"Delete Selected\")) : React.createElement(TouchableOpacity, {\n    style: {\n      backgroundColor: Color.theme,\n      flexDirection: 'row',\n      borderRadius: 5,\n      alignItems: 'center',\n      width: 180,\n      paddingVertical: 5\n    },\n    onPress: function onPress() {\n      return launchModalHandler();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 21\n    }\n  }, React.createElement(Icon, {\n    name: \"md-close\",\n    type: \"ionicon\",\n    color: \"white\",\n    style: {\n      paddingLeft: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 25\n    }\n  }), React.createElement(Text, {\n    style: {\n      paddingLeft: 10,\n      color: 'white',\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }\n  }, \"Delete Selected (\", checkCount, \")\")))));\n\n  function findEntryIndex(id) {\n    for (var i = 0; i < plantEntries.length; i++) {\n      if (plantEntries[i].key == id) return i;\n    }\n\n    console.log(\"Could not find index in findEntry function\");\n    return -1;\n  }\n}\n\nvar styles = StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    backgroundColor: Color.background,\n    marginTop: 25,\n    paddingBottom: 25,\n    alignItems: 'center'\n  },\n  searchContainer: {\n    paddingTop: 19,\n    width: '90%'\n  },\n  sortingContainer: {\n    width: '95%',\n    flex: 1\n  },\n  container: {\n    paddingTop: 30,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.5)'\n  }\n});\n\nfunction formatDate(date) {\n  var originalDate = date;\n  var day;\n  var month = -1;\n  var year;\n  var dateArray = originalDate.split(\"-\");\n\n  switch (dateArray[1].toLowerCase()) {\n    case \"1\":\n      month = 'January';\n      break;\n\n    case \"2\":\n      month = 'February';\n      break;\n\n    case \"3\":\n      month = \"March\";\n      break;\n\n    case \"4\":\n      month = \"April\";\n      break;\n\n    case \"5\":\n      month = \"May\";\n      break;\n\n    case \"6\":\n      month = \"June\";\n      break;\n\n    case \"7\":\n      month = \"July\";\n      break;\n\n    case \"8\":\n      month = \"August\";\n      break;\n\n    case \"9\":\n      month = \"September\";\n      break;\n\n    case \"10\":\n      month = \"October\";\n      break;\n\n    case \"11\":\n      month = \"November\";\n      break;\n\n    case \"12\":\n      month = \"December\";\n      break;\n  }\n\n  day = dateArray[2];\n  year = dateArray[0];\n  console.log(dateArray[1]);\n  console.log(month);\n  var completeDate = month + \" \" + day + \", \" + year;\n  return completeDate;\n}\n\nfunction convertDate(givenDate) {\n  var tempDate = givenDate.split(\"-\");\n  console.log(tempDate[0]);\n  console.log(tempDate[1]);\n  console.log(tempDate[2]);\n  var month = tempDate[1];\n  var day = tempDate[2];\n  var year = tempDate[0];\n  var date = month + \"/\" + day + \"/\" + year;\n  return date;\n}\n\nexport { Search };","map":{"version":3,"sources":["D:/Repositories/FlowerPower-Mobile-App/flower-power-mobile/Screens/Search.js"],"names":["React","useState","useEffect","useContext","Color","Line","DottedLine","Dash","Input","BrownButton","Icon","myPlants","plantReminders","PlantEntry","DialogueBox","CheckBox","GlobalContext","Search","navigation","plantEntriesContext","username","setUsername","checkCount","setCheckCount","modalVisible","setModalVisible","plantEntries","setPlantEntries","currentEntry","setCurrentEntry","filteredArray","setFilteredArray","searchInput","setSearchInput","deletePressed","setDeletePressed","toggleCheckBox","setToggleCheckBox","id","backgroundColor","header","color","background","sortButtons","setSortButtons","length","filterTable","text","tempArray","i","nickname","toLowerCase","includes","push","cancelHandler","console","log","deleteHandler","currentPlants","filter","name","deleteEntry","toggleDeleteHandler","checkboxState","index","findEntryIndex","launchModalHandler","toggleSort","tempObject","sortByNickName","sortBySpecies","sortByClassification","sortByDate","tempEntries","sort","a","b","species","classification","Date","convertDate","date","styles","mainContainer","theme","container","searchContainer","fontSize","paddingTop","alignItems","borderColor","borderWidth","borderRadius","paddingLeft","width","flexDirection","paddingBottom","justifyContent","textAlign","sortingContainer","paddingHorizontal","flex","map","key","formatDate","image","require","resizeMode","height","paddingVertical","StyleSheet","create","marginTop","originalDate","day","month","year","dateArray","split","completeDate","givenDate","tempDate"],"mappings":"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","sourcesContent":["import React, {useState,useEffect, useContext} from 'react'\r\nimport {Text, View, Button, StyleSheet,StatusBar, Image,TouchableOpacity, TextInput, ScrollView, FlatList, Modal} from 'react-native'\r\nimport Color from '../constants/colors';\r\nimport {Line} from '../components/Line'\r\nimport {DottedLine} from '../components/DottedLine'\r\nimport Dash from 'react-native-dash';\r\nimport { Input } from 'react-native-elements';\r\nimport {BrownButton} from '../components/BrownButton'\r\nimport {Icon} from 'react-native-elements'\r\nimport {myPlants, plantReminders} from '../constants/plants'\r\nimport {PlantEntry} from '../components/PlantEntry'\r\nimport { DialogueBox } from '../components/DialogueBox';\r\nimport { CheckBox } from 'react-native-elements'\r\nimport {GlobalContext} from '../context/GlobalContext'\r\n\r\nfunction Search({navigation})\r\n{\r\n    const {plantEntriesContext} = useContext(GlobalContext);\r\n    const [username, setUsername] = useState(\"Richard\");\r\n    const [checkCount, setCheckCount] = useState(0);\r\n\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [plantEntries, setPlantEntries] =  plantEntriesContext;\r\n    const [currentEntry, setCurrentEntry] = useState('');\r\n    const [filteredArray, setFilteredArray] = useState([]);\r\n    const [searchInput, setSearchInput] = useState(\"\");\r\n    const [deletePressed, setDeletePressed] = useState(false);\r\n\r\n    const [toggleCheckBox, setToggleCheckBox] = useState(false);\r\n\r\n    const [sortButtons, setSortButtons] = useState([\r\n        {id:1, backgroundColor:Color.header, color:'white'},\r\n        {id:2, backgroundColor:Color.background, color:Color.header},\r\n        {id:3, backgroundColor:Color.background, color:Color.header},\r\n        {id:4, backgroundColor:Color.background, color:Color.header},\r\n    ]);\r\n\r\n    // Execute after plant entries update and delete has been pressed\r\n    React.useEffect(() =>{\r\n\r\n        if(searchInput.length != 0 && deletePressed == true)\r\n            filterTable(searchInput);\r\n\r\n    },[plantEntries])\r\n\r\n    // Execute to filter global based on text input\r\n    function filterTable(text)\r\n    {\r\n        let tempArray = [];\r\n        \r\n        for(let i = 0; i < plantEntries.length; i++)\r\n        {\r\n            if(plantEntries[i].nickname.toLowerCase().includes(text.toLowerCase()))\r\n                tempArray.push (plantEntries[i]);\r\n        }\r\n\r\n        setFilteredArray([...tempArray]);\r\n    }\r\n\r\n    function cancelHandler()\r\n    {\r\n        console.log(\"Cancel pressed\");\r\n        setModalVisible(false);\r\n    }\r\n\r\n    function deleteHandler()\r\n    {\r\n        setDeletePressed(true);\r\n        setPlantEntries(currentPlants => {return (currentPlants.filter((name) => name.deleteEntry == false))})\r\n        console.log(\"Delete Pressed\");\r\n        setCheckCount(0);\r\n        // alert('Entry has been deleted');\r\n        setModalVisible(false);\r\n    }\r\n\r\n    function toggleDeleteHandler(id, checkboxState)\r\n    {\r\n\r\n        let tempArray = [...plantEntries];\r\n        let index = findEntryIndex(id);\r\n\r\n        if(checkboxState == true)\r\n        {\r\n            tempArray[index].deleteEntry = true;\r\n            setCheckCount(checkCount+1);\r\n        }\r\n        else\r\n        {\r\n            tempArray[index].deleteEntry = false;\r\n            setCheckCount(checkCount-1);\r\n        }\r\n\r\n        setPlantEntries([...tempArray]);\r\n    }\r\n\r\n    function launchModalHandler()\r\n    {\r\n        setModalVisible(true);\r\n    \r\n    }\r\n\r\n    function toggleSort(id)\r\n    {\r\n        let tempObject = [...sortButtons];\r\n\r\n        if(id == 1)\r\n        {\r\n            sortByNickName();\r\n        }\r\n        else if(id == 2)\r\n        {\r\n            sortBySpecies();\r\n        }\r\n        else if(id == 3)\r\n        {\r\n            sortByClassification();\r\n        }\r\n        else\r\n        {\r\n            sortByDate();\r\n        }\r\n\r\n        for(let i = 0; i < tempObject.length; i++)\r\n        {\r\n            if(tempObject[i].id == id)\r\n            {\r\n                tempObject[i].backgroundColor = Color.header;\r\n                tempObject[i].color = 'white';\r\n            }\r\n            else\r\n            {\r\n                tempObject[i].backgroundColor = Color.background;\r\n                tempObject[i].color = Color.header;\r\n            }\r\n        }\r\n\r\n        setSortButtons(tempObject);\r\n    }\r\n\r\n    // Sorts By NickName\r\n    function sortByNickName()\r\n    {\r\n        let tempEntries;\r\n\r\n        if(searchInput.length == 0)\r\n            tempEntries = [...plantEntries];\r\n        else\r\n            tempEntries = [...filteredArray];\r\n        \r\n        tempEntries = tempEntries.sort((a,b) =>{\r\n            if(a.nickname.toLowerCase() > b.nickname.toLowerCase())\r\n                return 1;\r\n            else if(a.nickname.toLowerCase() < b.nickname.toLowerCase())\r\n                return -1;\r\n            else\r\n                return 0;\r\n        })\r\n\r\n        if(searchInput.length == 0)\r\n            setPlantEntries([...tempEntries]);\r\n        else\r\n            setFilteredArray([...tempEntries]);\r\n  \r\n    }\r\n  \r\n    function sortBySpecies()\r\n    {\r\n        let tempEntries = [...plantEntries];\r\n\r\n\r\n        tempEntries = tempEntries.sort((a,b) =>{\r\n            if(a.species.toLowerCase() > b.species.toLowerCase())\r\n                return 1;\r\n            else if(a.species.toLowerCase() < b.species.toLowerCase())\r\n                return -1;\r\n            else\r\n                return 0;\r\n        })\r\n\r\n        setPlantEntries([...tempEntries]);\r\n  \r\n    }\r\n  \r\n    function sortByClassification()\r\n    {\r\n        let tempEntries = [...plantEntries];\r\n\r\n        tempEntries = tempEntries.sort((a,b) =>{\r\n            if(a.classification[0].toLowerCase() > b.classification[0].toLowerCase())\r\n                return 1;\r\n            else if(a.classification[0].toLowerCase() < b.classification[0].toLowerCase())\r\n                return -1;\r\n            else\r\n                return 0;\r\n        })\r\n\r\n        setPlantEntries([...tempEntries]);\r\n  \r\n    }\r\n\r\n    function sortByDate()\r\n    {\r\n        let tempEntries;\r\n\r\n        if(searchInput.length == 0)\r\n            tempEntries = [...plantEntries];\r\n        else\r\n            tempEntries = [...filteredArray];\r\n\r\n\r\n        tempEntries = tempEntries.sort((a,b) => {\r\n            return new Date(convertDate(a.date)) - new Date(convertDate(b.date));\r\n        });\r\n\r\n        if(searchInput.length == 0)\r\n            setPlantEntries([...tempEntries]);\r\n        else\r\n            setFilteredArray([...tempEntries]);\r\n    }\r\n\r\n    return (\r\n        <ScrollView nestedScrollEnabled = {true}>\r\n            <View style = {styles.mainContainer}>\r\n                <StatusBar barstyle = \"dark-content\" hidden = {false} backgroundColor = {Color.theme} translucent = {true}/>\r\n\r\n                <Modal visible = {modalVisible} animationType = \"slide\" transparent = {true}>\r\n                    <View style = {{...styles.container}}>\r\n                        <DialogueBox onCancel = {cancelHandler} onDelete = {deleteHandler}/>\r\n                    </View>\r\n                </Modal>\r\n\r\n                {/* Search Container - Blue */}\r\n                <View style = {styles.searchContainer}>\r\n                    <View>   \r\n                        <Text style = {{color: Color.header, fontSize:16}}>\r\n                            Enter a phrase below to search through your saved plants. Plants with a nickname or species matching the search name will be shown\r\n                        </Text>\r\n                    </View>\r\n                    <View style = {{paddingTop:10, alignItems:'center'}}>\r\n                        <TextInput \r\n                            placeholder = \"Search Criteria\"\r\n                            style = {{borderColor:'#a5dfb2', borderWidth:2,borderRadius:5,backgroundColor:'white',paddingLeft:10, width:'100%'}}\r\n                            placeholderTextColor = 'black'\r\n                            onChangeText = {text => { filterTable(text);setSearchInput(text); \r\n                            }}\r\n                        />\r\n                    </View>\r\n                    <View style = {{flexDirection:'row',paddingBottom:10, justifyContent:'space-between', alignItems:'center'}}>\r\n                        <View style = {{flexDirection:'row', justifyContent:'center', alignItems:'center'}}>\r\n                            <CheckBox\r\n                                checked = {toggleCheckBox}\r\n                                onPress = {() => setToggleCheckBox(!toggleCheckBox)}\r\n                            />\r\n                            <Text style = {{textAlign:'center'}}>Display partial matches</Text>\r\n                        </View>\r\n                        <View style = {{flexDirection:'row', justifyContent:'center',alignItems:'center'}}>\r\n                            <Icon name = 'search' type = \"material\" color = {Color.header}/>\r\n                            <Text style = {{color:Color.header}}>Search</Text>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n\r\n                <Line/>\r\n\r\n                {/* Sorting Container - Red */}\r\n                <View style = {styles.sortingContainer}>\r\n                    <View style = {{flexDirection:'row', justifyContent:'space-between'}}>\r\n                        <Text>Sort results by: </Text>\r\n                        <View style = {{flexDirection:'row',alignItems:'flex-start'}}>\r\n                        <BrownButton data = {sortButtons[0]} onSort = {toggleSort}>Nickname</BrownButton>\r\n                        <BrownButton data = {sortButtons[1]} onSort = {toggleSort}>Species</BrownButton>\r\n                        <BrownButton data = {sortButtons[2]} onSort = {toggleSort}>Classification</BrownButton>\r\n                        <BrownButton data = {sortButtons[3]} onSort = {toggleSort}>Date</BrownButton>\r\n                        </View>\r\n                        <View>\r\n                            <TouchableOpacity>\r\n                                <View style = {{backgroundColor: Color.header,paddingHorizontal:2}}>\r\n                                    <Icon name ='md-arrow-down' type = 'ionicon' color = \"white\" size = {20} />\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </View>\r\n\r\n                    <View style = {{paddingTop:20}}>\r\n                        <Text>Currently displaying search results for: \"{searchInput}\"</Text>\r\n                    </View>\r\n\r\n                    {/* Vertical Scroll List - Plant Reminders */}\r\n\r\n                    <View style = {{paddingTop:20, flex:1}}>\r\n                    \r\n                    {searchInput.length == 0 && plantEntries.map((name) =>\r\n                        <PlantEntry\r\n                            key = {name.key}\r\n                            id = {name.key}\r\n                            classification = {[...name.classification]}\r\n                            nickname = {name.nickname}\r\n                            species = {name.species}\r\n                            date = {formatDate(name.date)}\r\n                            image = {name.image}\r\n                            onModal = {launchModalHandler}\r\n                            onToggleDelete = {toggleDeleteHandler}\r\n                        />\r\n                    )}\r\n\r\n                    {searchInput.length != 0 && filteredArray.map((name) =>\r\n                        <PlantEntry\r\n                            key = {name.key}\r\n                            id = {name.key}\r\n                            classification = {[...name.classification]}\r\n                            nickname = {name.nickname}\r\n                            species = {name.species}\r\n                            date = {formatDate(name.date)}\r\n                            image = {name.image}\r\n                            onModal = {launchModalHandler}\r\n                            onToggleDelete = {toggleDeleteHandler}\r\n                        />\r\n                    )}\r\n                        \r\n                    </View>\r\n                    \r\n                </View>\r\n                \r\n                {plantEntries.length == 0 &&\r\n                    <View style = {{alignItems:'center'}}>\r\n                        <Text style = {{fontSize:16}}>You are currently not watching any plants.</Text>\r\n                        <Text style = {{fontSize:16}}>Add a plant in New Entry Tab to have seach history.</Text>\r\n                        <Image source = {require(\"../assets/plantSearch.png\")} style = {{resizeMode:'stretch', width:200, height:200}} />\r\n                    </View>\r\n                }\r\n                \r\n                {/* Delete Button */}\r\n                { plantEntries.length != 0 &&\r\n                <View style = {{alignItems:'center', paddingTop:20}}>\r\n                    {checkCount == 0 ?\r\n                    <TouchableOpacity \r\n                        style = {{backgroundColor:Color.theme, flexDirection:'row', borderRadius:5, alignItems:'center', width:170, paddingVertical:5}}\r\n                        onPress = {() => launchModalHandler()}\r\n                    >\r\n                        <Icon name ='md-close' type = 'ionicon' color = \"white\" style = {{paddingLeft:10}}/>\r\n                        <Text style = {{paddingLeft:10, color:'white', fontSize:16}}>Delete Selected</Text>\r\n                    </TouchableOpacity>\r\n                :\r\n                    <TouchableOpacity \r\n                        style = {{backgroundColor:Color.theme, flexDirection:'row', borderRadius:5, alignItems:'center', width:180, paddingVertical:5}}\r\n                        onPress = {() => launchModalHandler()}\r\n                    >\r\n                        <Icon name ='md-close' type = 'ionicon' color = \"white\" style = {{paddingLeft:10}}/>\r\n                        <Text style = {{paddingLeft:10, color:'white', fontSize:16}}>Delete Selected ({checkCount})</Text>\r\n                    </TouchableOpacity>\r\n                    }\r\n                </View>\r\n                }\r\n            </View>\r\n            \r\n            \r\n                {/* <Button title = \"TestButton\" onPress = {() => setUsername(\"Dusty\")} /> */}\r\n                {/* <Button title = \"PlantEntries\" onPress = {() => console.log(plantEntries)} />\r\n                <Button title = \"FilteredEntries\" onPress = {() => console.log(filteredArray)} /> */}\r\n           \r\n        </ScrollView>\r\n    )\r\n    \r\n    function findEntryIndex(id)\r\n    {\r\n        for(let i = 0; i < plantEntries.length; i++)\r\n        {\r\n            if(plantEntries[i].key == id)\r\n                return i;\r\n        }\r\n\r\n        console.log(\"Could not find index in findEntry function\");\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mainContainer:\r\n    {\r\n        flex:1,\r\n        backgroundColor: Color.background,\r\n        marginTop:25,\r\n        // borderWidth:5, borderColor:'purple',\r\n        paddingBottom:25,\r\n        alignItems:'center'\r\n    },\r\n    searchContainer:{\r\n        // borderWidth:5, borderColor:'blue',\r\n        paddingTop:19,\r\n        width:'90%',\r\n    },\r\n    sortingContainer:\r\n    {\r\n        // orderWidth:5, borderColor:'red',\r\n        width: '95%',\r\n        flex:1\r\n    },\r\n      container: {\r\n    paddingTop:30, \r\n    // borderWidth:5, borderColor:'purple',\r\n    flex:1, \r\n    justifyContent:'center', \r\n    alignItems:'center',\r\n    backgroundColor:'rgba(0,0,0,0.5)'\r\n  }\r\n})\r\n\r\n\r\nfunction formatDate(date)\r\n{\r\n    let originalDate = date;\r\n\r\n    let day;\r\n    let month = -1;\r\n    let year;\r\n\r\n    let dateArray = originalDate.split(\"-\");\r\n\r\n    switch(dateArray[1].toLowerCase())\r\n    {\r\n        case \"1\":\r\n            month = 'January';\r\n            break;\r\n        case \"2\":\r\n            month = 'February';\r\n            break;\r\n        case \"3\":\r\n            month = \"March\";\r\n            break;\r\n        case \"4\":\r\n            month = \"April\";\r\n            break;\r\n        case \"5\":\r\n            month = \"May\";\r\n            break;\r\n        case \"6\":\r\n            month = \"June\";\r\n            break;\r\n        case \"7\":\r\n            month = \"July\";\r\n            break;\r\n        case \"8\":\r\n            month = \"August\";\r\n            break;\r\n        case \"9\":\r\n            month = \"September\";\r\n            break;\r\n        case \"10\":\r\n            month = \"October\";\r\n            break;\r\n        case \"11\":\r\n            month = \"November\";\r\n            break;\r\n        case \"12\":\r\n            month = \"December\";\r\n            break;\r\n    }\r\n\r\n    day = dateArray[2];\r\n    year = dateArray[0];\r\n    console.log(dateArray[1]);\r\n    console.log(month);\r\n\r\n    let completeDate = `${month} ${day}, ${year}`;\r\n\r\n    return completeDate;\r\n}\r\n\r\n\r\nfunction convertDate(givenDate)\r\n{\r\n\r\n    let tempDate = givenDate.split(\"-\");\r\n\r\n    console.log(tempDate[0]);\r\n    console.log(tempDate[1]);\r\n    console.log(tempDate[2]);\r\n\r\n    let month = tempDate[1]\r\n    let day = tempDate[2];\r\n    let year = tempDate[0];\r\n\r\n    let date = `${month}/${day}/${year}`;\r\n\r\n    return date;\r\n\r\n}\r\n\r\nexport {Search}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}